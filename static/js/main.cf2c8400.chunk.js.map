{"version":3,"sources":["util/index.js","component/Home.js","component/Skill.js","component/Experience.js","component/About.js","App.js","serviceWorker.js","index.js"],"names":["goToPage","id","document","querySelector","classList","remove","setTimeout","element","add","closePage","Home","react_default","a","createElement","className","href","onClick","bind","Skill","lib_default","name","Experience","About","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAAaA,EAAW,SAACC,GACHC,SAASC,cAAc,cAC/BC,UAAUC,OAAO,UAC7BC,WAAW,WACT,IAAMC,EAAUL,SAASC,cAAc,IAAMF,GAC7CM,GAAWA,EAAQH,UAAUI,IAAI,WAChC,MAEQC,EAAY,SAACR,GACxB,IAAMM,EAAUL,SAASC,cAAc,IAAMF,GAC7CM,GAAWA,EAAQH,UAAUC,OAAO,UACpCC,WAAW,WACWJ,SAASC,cAAc,cAC/BC,UAAUI,IAAI,WACzB,MCXUE,EAAA,kBACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBb,GAAG,aACnCU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,0BAA2CH,EAAAC,EAAAC,cAAA,WAA3C,oCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,qBAAqBC,QAAShB,EAASiB,KAAK,KAAM,eAA1D,SACAN,EAAAC,EAAAC,cAAA,KAAGE,KAAK,qBAAqBC,QAAShB,EAASiB,KAAK,KAAM,oBAA1D,cACAN,EAAAC,EAAAC,cAAA,KAAGE,KAAK,qBAAqBC,QAAShB,EAASiB,KAAK,KAAM,eAA1D,4BCRSC,EAAA,kBACbP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAab,GAAG,cAC7BU,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAaQ,KAAK,QAAQJ,QAASP,EAAUQ,KAAK,KAAM,kBCF7CI,EAAA,kBACbV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBb,GAAG,mBAClCU,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAaQ,KAAK,QAAQJ,QAASP,EAAUQ,KAAK,KAAM,uBCF7CK,EAAA,kBACbX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAab,GAAG,cAC7BU,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAaQ,KAAK,QAAQJ,QAASP,EAAUQ,KAAK,KAAM,kBCa7CM,mLAXX,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACS,EAAD,cAPUE,yBCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAAS9B,SAAS+B,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cf2c8400.chunk.js","sourcesContent":["export const goToPage = (id) => {\r\n  const homeElement = document.querySelector('#home_page')\r\n  homeElement.classList.remove('active')\r\n  setTimeout(() => {\r\n    const element = document.querySelector('#' + id)\r\n    element && element.classList.add('active')\r\n  }, 2000)\r\n}\r\nexport const closePage = (id) => {\r\n  const element = document.querySelector('#' + id)\r\n  element && element.classList.remove('active')\r\n  setTimeout(() => {\r\n    const homeElement = document.querySelector('#home_page')\r\n    homeElement.classList.add('active')\r\n  }, 2000)\r\n}\r\n","import React from 'react'\r\nimport { goToPage } from './../util'\r\n\r\nexport default () => (\r\n  <div className=\"home-page active\" id=\"home_page\">\r\n    <div className=\"cloud\"></div>\r\n    <div className=\"grass\"></div>\r\n    <div className=\"ground\"></div>\r\n    <h2 className=\"top\">Hello. My name is Quan <br /> I am a full-stack web developer</h2>\r\n    <div className=\"top\">\r\n      <a href=\"javascript:void(0)\" onClick={goToPage.bind(null, 'skill_page')}>Skill</a>\r\n      <a href=\"javascript:void(0)\" onClick={goToPage.bind(null, 'experience_page')}>Experience</a>\r\n      <a href=\"javascript:void(0)\" onClick={goToPage.bind(null, 'about_page')}>About</a>\r\n    </div>\r\n  </div>\r\n)\r\n","import React from 'react'\r\nimport FontAwesome from 'react-fontawesome'\r\nimport { closePage } from './../util'\r\n\r\nexport default () => (\r\n  <div className=\"skill-page\" id=\"skill_page\">\r\n    <FontAwesome name='close' onClick={closePage.bind(null, 'skill_page')} />\r\n  </div>\r\n)\r\n","import React from 'react'\r\nimport FontAwesome from 'react-fontawesome'\r\nimport { closePage } from './../util'\r\n\r\nexport default () => (\r\n  <div className=\"experience-page\" id=\"experience_page\">\r\n    <FontAwesome name='close' onClick={closePage.bind(null, 'experience_page')} />\r\n  </div>\r\n)\r\n","import React from 'react'\r\nimport FontAwesome from 'react-fontawesome'\r\nimport { closePage } from './../util'\r\n\r\nexport default () => (\r\n  <div className=\"about-page\" id=\"about_page\">\r\n    <FontAwesome name='close' onClick={closePage.bind(null, 'about_page')} />\r\n  </div>\r\n)\r\n","import React, { Component } from 'react';\nimport Home from './component/Home'\nimport Skill from './component/Skill'\nimport Experience from './component/Experience'\nimport About from './component/About'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n        <Skill />\n        <Experience />\n        <About />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/index.css'\nimport 'font-awesome/css/font-awesome.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}